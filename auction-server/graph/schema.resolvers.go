package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"time"

	"github.com/micahli/fl-auction/auction-server/internal/model"
)

// StartTime formats the auction start time for GraphQL
func (r *auctionResolver) StartTime(ctx context.Context, obj *model.Auction) (string, error) {
	return obj.StartTime.Format(time.RFC3339), nil
}

// EndTime formats the auction end time for GraphQL
func (r *auctionResolver) EndTime(ctx context.Context, obj *model.Auction) (string, error) {
	return obj.EndTime.Format(time.RFC3339), nil
}

// Timestamp formats the bid timestamp for GraphQL
func (r *bidResolver) Timestamp(ctx context.Context, obj *model.Bid) (string, error) {
	return obj.Timestamp.Format(time.RFC3339), nil
}

// CreateAuction creates a new auction with the specified parameters
func (r *mutationResolver) CreateAuction(ctx context.Context, startingBid float64, duration *int, extendedBidding *bool) (*model.Auction, error) {
	// Set default values for optional parameters
	d := 30
	if duration != nil {
		d = *duration
	}

	eb := false
	if extendedBidding != nil {
		eb = *extendedBidding
	}

	// Call the service to create the auction (access through Resolver)
	auction, err := r.Resolver.service.CreateAuction(ctx, startingBid, d, eb)
	if err != nil {
		return nil, fmt.Errorf("failed to create auction: %w", err)
	}

	return auction, nil
}

// PlaceBid places a bid on the current auction
func (r *mutationResolver) PlaceBid(ctx context.Context, userID string, amount float64) (*model.Bid, error) {
	// Call the service to place the bid
	bid, err := r.service.PlaceBid(ctx, userID, amount)
	if err != nil {
		// Return user-friendly error messages
		switch err {
		case model.ErrBidTooLow:
			return nil, fmt.Errorf("bid too low: must be higher than current bid")
		case model.ErrBidTooLate:
			return nil, fmt.Errorf("bid too late: auction has ended")
		case model.ErrNoActiveAuction:
			return nil, fmt.Errorf("no active auction available")
		default:
			return nil, fmt.Errorf("failed to place bid: %w", err)
		}
	}

	return bid, nil
}

// CurrentAuction returns the current active or most recent auction
func (r *queryResolver) CurrentAuction(ctx context.Context) (*model.Auction, error) {
	auction := r.service.GetCurrentAuction()
	if auction == nil {
		// Return nil without error - this is valid (no auction exists)
		return nil, nil
	}

	return auction, nil
}

// AuctionEvents subscribes to real-time auction events
func (r *subscriptionResolver) AuctionEvents(ctx context.Context) (<-chan *model.AuctionEvent, error) {
	// Generate a unique subscriber ID
	subscriberID := fmt.Sprintf("sub-%d", time.Now().UnixNano())

	// Subscribe to auction events
	eventChannel := r.service.Subscribe(subscriberID)

	// Clean up the subscription when the context is cancelled
	go func() {
		<-ctx.Done()
		r.service.Unsubscribe(subscriberID)
	}()

	// Optionally send the current auction state immediately upon subscription
	if currentAuction := r.service.GetCurrentAuction(); currentAuction != nil {
		// Send current state as first event (non-blocking)
		go func() {
			select {
			case eventChannel <- model.NewAuctionStartedEvent(currentAuction):
			case <-time.After(1 * time.Second):
				// Skip if channel is not ready
			}
		}()
	}

	return eventChannel, nil
}

// Auction returns AuctionResolver implementation.
func (r *Resolver) Auction() AuctionResolver { return &auctionResolver{r} }

// Bid returns BidResolver implementation.
func (r *Resolver) Bid() BidResolver { return &bidResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type auctionResolver struct{ *Resolver }
type bidResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
